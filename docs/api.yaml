openapi: 3.0.3
info:
  title: Todo App API
  description: |
    The Todo App is a basic web application that implements user authentication and authorization using JSON Web Tokens (JWT) for securing API endpoints. It allows users to sign up, log in, create todos, view their todos, log out, view their user profile information, change their password, and delete their account. The project uses the Go programming language and the Gin web framework for building the backend APIs. It also involves database interactions using GORM, a Golang ORM library, for managing user data and blacklisted tokens.

    **Technologies and Components:**
    - Programming Language: Go (Golang)
    - Web Framework: Gin
    - Database: Postgresql
    - Database Interaction: GORM
    - GUI for Database: Table Plus (Optional)
    - Authentication & Authorization: JSON Web Tokens (JWT) & Cookie.
    - Password Hashing: bcrypt
    - .env access: godotenv

    **Useful Links:**
    - [Gin Web Framework](https://gin-gonic.com/)
    - [GORM Library](https://gorm.io/)
    - [JSON Web Tokens (JWT)](https://jwt.io/)
    - [bcrypt](https://pkg.go.dev/golang.org/x/crypto/bcrypt)
    - [godotenv](https://github.com/joho/godotenv)

    The project's main goal is to showcase how to implement user authentication and authorization in a Go web application using modern tools and best practices. It provides a solid foundation for building more complex web applications with user management features.

  termsOfService: null.
  contact:
    email: imertkaradayi@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:3000/
tags:
  - name: Authentication
    description: Endpoints for user authentication
  - name: Todos
    description: Endpoints for managing user todos
  - name: User Profile
    description: Endpoints for user profile management

paths:
  /todos:
    post:
      tags:
        - Todos
      summary: Create a Todo
      operationId: createTodo
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                Status:
                  type: string
                Description:
                  type: string
              required:
                - Status
                - Description
      responses:
        "200":
          description: Todo created successfully
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
    get:
      tags:
        - Todos
      summary: Get all Todos
      operationId: getTodos
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of Todos
          content:
            application/json:
              example:
                - ID: 1
                  CreatedAt: "2023-08-29T13:55:27.986248+03:00"
                  UpdatedAt: "2023-08-29T13:55:40.925306+03:00"
                  DeletedAt: null
                  UserID: 1
                  Status: "Updated Status"
                  Description: "Updated Description"
                - ID: 2
                  CreatedAt: "2023-08-29T13:55:29.477739+03:00"
                  UpdatedAt: "2023-08-29T13:55:29.477739+03:00"
                  DeletedAt: null
                  UserID: 1
                  Status: "Uncompleted"
                  Description: "zeynep test 2"
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
  /todos/{id}:
    put:
      tags:
        - Todos
      summary: Update a Todo
      operationId: updateTodo
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the Todo to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                Status:
                  type: string
                Description:
                  type: string
              required:
                - Status
                - Description
      responses:
        "200":
          description: Todo updated successfully
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Todo not found
        "500":
          description: Internal server error
    delete:
      tags:
        - Todos
      summary: Delete a Todo
      operationId: DeleteTodo
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the Todo to delete.
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Todo Deleted Successfully.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Todo not found
        "500":
          description: Internal server error

  /signup:
    post:
      tags:
        - Authentication
      summary: User Signup
      operationId: Signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                Email:
                  type: string
                Password:
                  type: string
                Name:
                  type: string
              required:
                - Email
                - Password
                - Name
      responses:
        "200":
          description: User created successfully
        "400":
          description: Bad request
        "500":
          description: Internal server error
  /login:
    post:
      tags:
        - Authentication
      summary: User Login
      operationId: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                Email:
                  type: string
                Password:
                  type: string
              required:
                - Email
                - Password
      responses:
        "200":
          description: Login successful
        "400":
          description: Invalid email or password
        "500":
          description: Internal server error
  /validate:
    get:
      tags:
        - Authentication
      summary: Validate Token
      operationId: Validate
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Token is valid
          content:
            application/json:
              example:
                message:
                  ID: 1
                  CreatedAt: "2023-08-29T21:56:29.371149+03:00"
                  UpdatedAt: "2023-08-29T21:56:29.371149+03:00"
                  DeletedAt: null
                  Email: "zeynep@hotmail.com"
                Name: "Zeynep Terzioglu"

        "401":
          description: Unauthorized
  /logout:
    post:
      tags:
        - Authentication
      summary: User Logout
      operationId: Logout
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Logout successful
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /user:
    get:
      tags:
        - User Profile
      summary: Get User Profile
      operationId: GetUserProfile
      security:
        - BearerAuth: []
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            applciation/json:
              example:
                ID: 1
                Email: zeynep@hotmail.com
                Name: Zeynep
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
    delete:
      tags:
        - User Profile
      summary: Delete User
      operationId: DeleteUser
      security:
        - BearerAuth: []
      responses:
        "200":
          description: User deleted successfully
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
    post:
      tags:
        - User Profile
      summary: Change Password
      operationId: ChangePassword
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                new_password:
                  type: string
              required:
                - new_password
      responses:
        "200":
          description: Password changed successfully
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    GormModel:
      type: object
      properties:
        ID:
          type: integer
        CreatedAt:
          type: string
          format: date-time
        UpdatedAt:
          type: string
          format: date-time
        DeletedAt:
          $ref: "#/components/schemas/DeletedAt"

    DeletedAt:
      type: object
      properties:
        Time:
          type: string
          format: date-time
        Valid:
          type: boolean

    User:
      type: object
      properties:
        GormModel:
          $ref: "#/components/schemas/GormModel"
        Email:
          type: string
        Password:
          type: string
        Name:
          type: string

    Todo:
      type: object
      properties:
        GormModel:
          $ref: "#/components/schemas/GormModel"
        UserID:
          type: integer
        Status:
          type: string
        Description:
          type: string

    BlackListedToken:
      type: object
      properties:
        GormModel:
          $ref: "#/components/schemas/GormModel"
        Token:
          type: string
        ExpiresAt:
          type: string
          format: date-time
